// Copyright (C) 2023  Braiins Systems s.r.o.
//
// This file is part of Braiins Open-Source Initiative (BOSI).
//
// BOSI is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Please, keep in mind that we may also license BOSI or any part thereof
// under a proprietary license. For more information on the terms and conditions
// of such proprietary license or if you have any other questions, please
// contact us at opensource@braiins.com.

syntax = "proto3";

package braiins.bos.v1;

import "bos/v1/common.proto";
import "bos/v1/cooling.proto";
import "bos/v1/pool.proto";
import "bos/v1/units.proto";
import "bos/v1/work.proto";
import "google/protobuf/wrappers.proto";

// Supported platforms
enum Platform {
  PLATFORM_UNSPECIFIED = 0;
  PLATFORM_AM1_S9 = 1;
  PLATFORM_AM2_S17 = 2;
  PLATFORM_AM3_BBB = 3;
  PLATFORM_AM3_AML = 4;
  PLATFORM_STM32MP157C_II1_AM2 = 5;
  PLATFORM_CVITEK_BM1_AM2 = 6;
}

// BOS modes enumeration
enum BosMode {
  BOS_MODE_UNSPECIFIED = 0;
  BOS_MODE_UPGRADE = 1;
  BOS_MODE_RECOVERY = 2;
  BOS_MODE_SD = 3;
  BOS_MODE_NAND = 4;
  BOS_MODE_EMMC = 5;
}

enum MinerBrand {
  MINER_BRAND_UNSPECIFIED = 0;
  MINER_BRAND_ANTMINER = 1;
  MINER_BRAND_WHATSMINER = 2;
}

// Deprecated: This enumeration is not longer maintained
enum MinerModel {
  option deprecated = true;
  MINER_MODEL_UNSPECIFIED = 0;
  MINER_MODEL_ANTMINER_S9 = 1;
  MINER_MODEL_ANTMINER_X17 = 2;
  MINER_MODEL_ANTMINER_S17 = 3;
  MINER_MODEL_ANTMINER_S17_PLUS = 4;
  MINER_MODEL_ANTMINER_S17_PRO = 5;
  MINER_MODEL_ANTMINER_S17E = 6;
  MINER_MODEL_ANTMINER_T17 = 7;
  MINER_MODEL_ANTMINER_T17E = 8;
  MINER_MODEL_ANTMINER_T17_PLUS = 9;
  MINER_MODEL_ANTMINER_X19 = 10;
  MINER_MODEL_ANTMINER_S19 = 11;
  MINER_MODEL_ANTMINER_S19_PRO = 12;
  MINER_MODEL_ANTMINER_S19_PLUS = 13;
  MINER_MODEL_ANTMINER_S19J = 14;
  MINER_MODEL_ANTMINER_S19J_PRO = 15;
  MINER_MODEL_ANTMINER_S19A = 16;
  MINER_MODEL_ANTMINER_S19A_PRO = 17;
  MINER_MODEL_ANTMINER_S19XP = 18;
  MINER_MODEL_ANTMINER_T19 = 19;
  MINER_MODEL_ANTMINER_S19J_PRO_PLUS = 20;
}

message MinerIdentity {
  MinerBrand brand = 1;
  // Deprecated: Use miner_model instead.
  // This field is no longer supported.
  MinerModel model = 2 [deprecated = true];
  string name = 3;
  string miner_model = 4;
}

// Structure to handle BOS version
message BosVersion {
  string current = 1;
  string major = 2;
  bool bos_plus = 3;
}

enum MinerStatus {
  MINER_STATUS_UNSPECIFIED = 0;
  MINER_STATUS_NOT_STARTED = 1;
  MINER_STATUS_NORMAL = 2;
  MINER_STATUS_PAUSED = 3;
  MINER_STATUS_SUSPENDED = 4;
  MINER_STATUS_RESTRICTED = 5;
}

message GetMinerStatusRequest {}

message GetMinerStatusResponse {
  MinerStatus status = 1;
}

message GetMinerDetailsRequest {}

// Structure to handle system details
message GetMinerDetailsResponse {
  // Miner ID
  string uid = 1;
  // Miner identity
  MinerIdentity miner_identity = 2;
  // Miner platform
  Platform platform = 3;
  // BOS Mode
  BosMode bos_mode = 4;
  // OS Version
  BosVersion bos_version = 5;
  // Hostname
  string hostname = 6;
  // MAC address
  string mac_address = 7;
  // Deprecated: Use system_uptime_s
  uint64 system_uptime = 8 [deprecated = true];
  // Miner hashrate declared by manufacturer
  braiins.bos.v1.GigaHashrate sticker_hashrate = 9;
  // Bosminer uptime. `0` means bosminer is not running
  uint64 bosminer_uptime_s = 10;
  // System uptime
  uint64 system_uptime_s = 11;
}

message MinerPowerStats {
  // Miner approximated power consumption.
  braiins.bos.v1.Power approximated_consumption = 1;
  // Miner power efficiency
  braiins.bos.v1.PowerEfficiency efficiency = 2;
}

message GetMinerStatsRequest {}

message GetMinerStatsResponse {
  // Aggregate pool statistic
  braiins.bos.v1.PoolStats pool_stats = 1;
  // Miner hashrate statistics
  braiins.bos.v1.WorkSolverStats miner_stats = 2;
  // Miner power stats
  MinerPowerStats power_stats = 3;
}

// Structure to handle HB details
message Hashboard {
  // Hashboard ID
  string id = 1;
  // Flag if HB is enabled
  bool enabled = 2;
  // Number of chips
  google.protobuf.UInt32Value chips_count = 3;
  // Current HB voltage in volts
  braiins.bos.v1.Voltage current_voltage = 4;
  // Current HB frequency in Hz
  braiins.bos.v1.Frequency current_frequency = 5;
  // Highest chip temperature
  braiins.bos.v1.TemperatureSensor highest_chip_temp = 6;
  // Board temperature
  braiins.bos.v1.Temperature board_temp = 7;
  // Hashboard stats
  braiins.bos.v1.WorkSolverStats stats = 8;
}

// Enumeration for support archive format
enum SupportArchiveFormat {
  SUPPORT_ARCHIVE_FORMAT_UNSPECIFIED = 0;
  // Compressed zip format
  SUPPORT_ARCHIVE_FORMAT_ZIP = 1;
  // BOS custom format
  SUPPORT_ARCHIVE_FORMAT_BOS = 2;
}

message GetSupportArchiveRequest {
  // Support archive format.
  SupportArchiveFormat format = 1;
}

message GetSupportArchiveResponse {
  // Support archive data
  bytes chunk_data = 1;
}

message GetHashboardsRequest {}

message GetHashboardsResponse {
  // All HB details
  repeated Hashboard hashboards = 1;
}

message EnableHashboardsRequest {
  // Save action
  braiins.bos.v1.SaveAction save_action = 1;
  // IDs of HB that should be enabled
  repeated string hashboard_ids = 2;
}

message EnableHashboardsResponse {
  // Hashboards enable state
  repeated HashboardEnableState hashboards = 1;
}

message DisableHashboardsRequest {
  // Save action
  braiins.bos.v1.SaveAction save_action = 1;
  // IDs of HB that should be disabled
  repeated string hashboard_ids = 2;
}

message DisableHashboardsResponse {
  // Hashboards disable state
  repeated HashboardEnableState hashboards = 1;
}

message HashboardEnableState {
  // Hashboard ID
  string id = 1;
  // Flag if hashboard is enabled or not
  bool is_enabled = 2;
}

service MinerService {
  // Method to fetch miner status
  rpc GetMinerStatus(GetMinerStatusRequest) returns (stream GetMinerStatusResponse);
  // Method to get miner details.
  rpc GetMinerDetails(GetMinerDetailsRequest) returns (GetMinerDetailsResponse);
  // Method to get aggregated miner stats.
  rpc GetMinerStats(GetMinerStatsRequest) returns (GetMinerStatsResponse);
  // Method to get miner hashboards state and statistics.
  rpc GetHashboards(GetHashboardsRequest) returns (GetHashboardsResponse);
  // Method to download BOS support archive
  // Method returns stream of messages with binary chunks that needs to be concatenated on the caller side
  rpc GetSupportArchive(GetSupportArchiveRequest) returns (stream GetSupportArchiveResponse);
  // Method to enable hashboards
  rpc EnableHashboards(EnableHashboardsRequest) returns (EnableHashboardsResponse);
  // Method to disable hashboards
  rpc DisableHashboards(DisableHashboardsRequest) returns (DisableHashboardsResponse);
}

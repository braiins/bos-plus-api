// Copyright (C) 2023  Braiins Systems s.r.o.
//
// This file is part of Braiins Open-Source Initiative (BOSI).
//
// BOSI is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Please, keep in mind that we may also license BOSI or any part thereof
// under a proprietary license. For more information on the terms and conditions
// of such proprietary license or if you have any other questions, please
// contact us at opensource@braiins.com.

syntax = "proto3";

package braiins.bos.v1;

import "bos/v1/units.proto";

enum LicenseType {
  LICENSE_TYPE_UNSPECIFIED = 0;
  LICENSE_TYPE_STANDARD = 1;
  LICENSE_TYPE_CUSTOM = 2;
}

message NoneLicense {
  // BOS Initialization timeout - number of seconds elapsed since bosminer start
  // i.e., number of seconds BOS will start mining in restricted mode burning 15% of hashrate
  uint32 time_to_restricted = 1;
}

message LimitedLicense {}

message ValidLicense {
  // License type
  LicenseType type = 1;
  // Contract name
  string contract_name = 2;
  // Current license expiration - number of seconds since the moment the license was received
  // i.e., number of seconds BOS will start mining in restricted mode burning 15% of hashrate
  uint32 time_to_restricted = 3;
  // Defines how much DevFee should be generated by the device.
  bos.v1.BasesPoints dev_fee = 4;
}

message ExpiredLicense {
  // License type
  LicenseType type = 1;
  // Contract name
  string contract_name = 2;
  // Defines how much DevFee should be generated by the device.
  bos.v1.BasesPoints dev_fee = 3;
}

message GetLicenseStateRequest {}

message GetLicenseStateResponse {
  oneof state {
    NoneLicense none = 1;
    LimitedLicense limited = 2;
    ValidLicense valid = 3;
    ExpiredLicense expired = 4;
  }
}

service LicenseService {
  rpc GetLicenseState(GetLicenseStateRequest) returns (GetLicenseStateResponse);
}
